import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.spark.util.Vector

import scala.util.Random
import scala.io.Source
import scala.collection.mutable.ArrayBuffer


//Except movid_Id, convert each line to Vector[Double]
def parseVector(line: String): Vector = {
    return new Vector(line.split(" ").drop(1).map(_.toDouble))
}

//calculate the closest centroid for a point (take each vector as a multi-dimensional point)
def closestPoint(p: Vector, centroids: Array[Vector]): Int = {
    var index = 0
    var bestIndex = 0
    var closest = Double.PositiveInfinity    // a positive number divided by 0
  
    for (i <- 0 until centroids.length) {
      val tempDist = p.squaredDist(centroids(i))
      if (tempDist < closest) {
        closest = tempDist
        bestIndex = i
      }
    }
  
    return bestIndex
}


val data = sc.textFile("hdfs://cshadoop1.utdallas.edu/xxz126730/hw4_dataset/itemusermat")
//val data = sc.textFile("C:/Users/Xinwen/Desktop/hw4_dataset/itemusermat")

val points = data.map(t => (t.split(" ")(0), parseVector(t)))   //(movie_id, Vector[Double])

val k = 10

var centroids = points.takeSample(false, k).map(x => x._2)   //(Vector[Double] of rating)

for(i <- 1 to 10){

    var closest = points.map(p => (closestPoint(p._2, centroids), (p._2, 1)))   //(index of the closest centroid, (point, 1))

    var pointStats = closest.reduceByKey{case ((x1, y1), (x2, y2)) => (x1 + x2, y1 + y2)}   //for each centroid, get the sum of all points and the total number of the points

    var newCentroids = pointStats.map {pair => (pair._1, pair._2._1 / pair._2._2)}.collectAsMap()   //average

    // assign newCentroids to centroids
    for (newP <- newCentroids) {
        centroids(newP._1) = newP._2
    }
}



val movieData = sc.textFile("hdfs://cshadoop1.utdallas.edu/xxz126730/hw4_dataset/movies.dat")

val splitLines = movieData.map(line => line.split("::")).map(line => (line(0), (line(0), "  " + line(1), "  " + line(2))))      //(movie_id, (movie_id, title, genres))

// each iteration corresponds to a centroid, and totally 10 iterations
var results = ArrayBuffer[ Array[(String, String, String)]]()
for((centroid, centroidIndex) <- centroids.zipWithIndex) {

    val candidates = points.filter(p => (closestPoint(p._2, centroids) == centroidIndex))   //(movie_id, Vector[Double])

    val joinFile = splitLines.join(candidates).take(5)   //(movie_id, ((movie_id, title, genres), Vector[Double]))

    val top5 = joinFile.map(x => x._2._1).toArray   //(movie_id, title, genres)

    results += top5
}

for(i <- 1 to 10){

    println("cluster: " + i)

    val element = results(i-1)

    element.foreach(println)

    println()

}


